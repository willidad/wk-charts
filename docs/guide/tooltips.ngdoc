@ngdoc guide
@module guide
@name tooltips
@description

# Tooltips

## Custom Tooltips

A custom tooltip is implemented by providing a HTML template url as value to the `tooltips` behavior directive. This template will be compiled by Angular and be used instead of the standard template.
The custom template will be positioned as usual, in case value markers are displayed for na axis these will be created and positioned automatically, like with the standard template.

> The tooltips function creates an isolated scope, which is a child of the charts parent scope. Thus, scope variables of the charts container hierarchy are accessible from the template through $parent.

> For more sophisticated formatting a controller can be attached to the template using the ng-controller directive.

To support tooltip formatting the $scope for this template exposes a number of attributes:

| scope property | Description |
| --- | --- |
| ttData | a object containing the data row the cursor is over |
| scale | an object referring to the charts dimensions scale functions|
| map | an object referring to the charts dimensions map function |
| value | an object referring to the charts dimensions value function |
| properties | an object containing the charts dimension properties |
| label | an abject containing the charts dimensions labels |

scales, maps, properties and labels scope variables have properties with the names of the chart dimensions, i.e. x, y ,color, size, etc.

### scale

Usage | `scale.<dimension name>(value)`
:--- |:---
Returns | the translated value
Examples | `scale.color('abc')` returns the color value used to represent `'abc'` in the chart
         | `scale.x(ttData.abc)` returns the x-axis pixel offset representing the value in `ttData.abc`
         | `scale.shape('xyz')` returns the name of the svg shape used to repesent `'xyz'`

### map

Usage | `maps.<dimension name>()`
:--- |:---
Returns | the translated value
Examples | `map.color()` returns the color value for the color dimension.
         | `map.x()` returns the x-axis pixel offset.
         | `map.shape()` returns the name of the svg shape.

> **Important** the maps functions should not be used for layer properties.

### value

Usage | `value.<dimension name>()`
:--- |:---
Returns | the translated value
Examples | `value.color()` returns the value of the color property.
         | `value.x()` returns the value of the x property.
         | `value.shape()` returns the value of the shape property.


### properties

Usage | `properties.<dimension name>`
:------ |:---
Returns | an array of property names for the dimension.

### label

Usage | `label.<dimension name>`
:------ |:---
Returns | the label text defined for the dimension. If no label is defined it returns the property name.
  |In case the property attribute of the dimension is not defined it returns an empty string.

## Example Templates

The following examples illustrate how to create an template in Jade.
The first example displays a simple tooltip with three values in a singe line.
The tooltip border is colored with the color of the chart object below the cursor:

    table.table.table-condensed.custom-tooltip(ng-style="{'border-color':map.color()}")
        tr
            td Days
            td {{ttData.CLASS_BOUNDS_LOWER}} to {{ttData.CLASS_BOUNDS_UPPER}}
            td Units : {{ttData.CLASS_COUNT}}

The second example shows a table with the layer property values. In this case the text is colored:

    table.table.table-condensed
        thead
            tr
                th(colspan="2") {{value.x() | date:'d MMM yyyy'}}
            tr
                th {{label.color}}
                th {{label.y}}
        tbody
            tr(ng-repeat="prop in properties.color()", ng-style="{'color':scale.color(prop)}")
                td {{prop}}
                td {{ttData[prop] | number:1}}